"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_cross_fetch = __toESM(require("cross-fetch"));
var Metaphor = class {
  baseURL;
  headers;
  constructor(apiKey, baseURL = "https://api.metaphor.systems") {
    this.baseURL = baseURL;
    this.headers = new import_cross_fetch.Headers({
      "x-api-key": apiKey,
      "Content-Type": "application/json",
      "User-Agent": "metaphor-node 1.0.21"
    });
  }
  async request(endpoint, method, body) {
    const response = await (0, import_cross_fetch.default)(this.baseURL + endpoint, {
      method,
      headers: this.headers,
      body: body ? JSON.stringify(body) : void 0
    });
    if (!response.ok) {
      const message = (await response.json()).error;
      throw new Error(
        `Request failed with status ${response.status}. ${message}`
      );
    }
    return await response.json();
  }
  async search(query, options) {
    return await this.request("/search", "POST", { query, ...options });
  }
  async findSimilar(url, options) {
    return await this.request("/findSimilar", "POST", { url, ...options });
  }
  async getContents(ids) {
    if (ids.length === 0) {
      throw new Error("Must provide at least one ID");
    }
    let requestIds;
    if (typeof ids[0] === "string") {
      requestIds = ids;
    } else {
      requestIds = ids.map((result) => result.id);
    }
    const params = new URLSearchParams({ ids: requestIds.join(",") });
    return await this.request(`/contents?${params}`, "GET");
  }
};
var src_default = Metaphor;
if (typeof module !== "undefined" && module.exports) {
  module.exports = Metaphor;
}
//# sourceMappingURL=index.js.map