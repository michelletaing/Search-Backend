{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import fetch, { Headers } from \"cross-fetch\";\n// Search options interface corresponds to the request schema for the /search endpoint without the query, which is the first parameter in  search()\ninterface SearchOptions {\n  numResults?: number; // Number of search results to return. Maximum 100. Default 10\n  includeDomains?: string[]; // Include results only from these domains. Example: ['example.com', 'sample.net']\n  excludeDomains?: string[]; // Exclude results from these domains. Example: ['excludedomain.comcludeme.net']\n  startCrawlDate?: string; // Include results only that were crawled after this date. Must be in ISO 8601 format. Example: '2023-01-01'\n  endCrawlDate?: string; // Include results only that were crawled before this date. Must be in ISO 8601 format. Example: '2023-12-31'\n  startPublishedDate?: string; // Include only links with a published date after this. Must be in ISO 8601 format. Example: '2023-01-01'\n  endPublishedDate?: string; // Include only links with a published date before this. Must be in ISO 8601 format. Example: '2023-12-31'\n  useAutoprompt?: boolean; // Uses Metaphor-optimized query.\n  type?: string; // Search can be 'keyword' or 'neural'. Default is 'neural'\n}\n\n// The Result interface represents a search result object from the API.\ninterface Result {\n  title: string; // The title of the search result.\n  url: string; // The URL of the search result.\n  publishedDate?: string; // The estimated creation date of the content. Format is YYYY-MM-DD. Nullable\n  author?: string; // The author of the content, if available. Nullable\n  score?: number; // A number from 0 to 1 representing similarity between the query/url and the result.\n  id: string; // The temporary ID for the document. Useful for /contents endpoint.\n}\n\n// The SearchResponse interface represents the response from the /search endpoint.\n// It includes an array of result objects.\ninterface SearchResponse {\n  results: Result[];\n  autopromptString?: string; // The autoprompt string for the query, if useAutoprompt was on.\n}\n\n// FindSimilarOptions interface corresponds to the request schema for the /findSimilar endpoint without the url, which is the first parameter in findSimilar()\ninterface FindSimilarOptions {\n  numResults?: number; // Number of search results to return. Maximum 100. Default 10\n  includeDomains?: string[]; // Include results only from these domains. Example: ['example.com', 'sample.net']\n  excludeDomains?: string[]; // Exclude results from these domains. Example: ['excludedomain.com', 'excludeme.net']\n  startCrawlDate?: string; // The optional start date (inclusive) for the crawled data. Must be specified in ISO 8601 format. Example: '2023-01-01'\n  endCrawlDate?: string; // The optional end date (inclusive) for the crawled data. Must be specified in ISO 8601 format. Example: '2023-12-31'\n  startPublishedDate?: string; // The optional start date (inclusive) for the published data. Must be specified in ISO 8601 format. Example: '2023-01-01'\n  endPublishedDate?: string; // The optional end date (inclusive) for the published data. Must be specified in ISO 8601 format. Example: '2023-12-31'\n}\n\n// The DocumentContent interface represents the content of a document from the /contents endpoint.\ninterface DocumentContent {\n  id: string; // The ID of the document.\n  url: string; // The URL of the document.\n  title: string; // The title of the document.\n  extract: string; // The first 1000 tokens of content in the document.\n}\n\n// The GetContentsResponse interface represents the response from the /contents endpoint.\n// It includes an array of document content objects.\ninterface GetContentsResponse {\n  contents: DocumentContent[];\n}\n\n// The Metaphor class encapsulates the API's endpoints.\nclass Metaphor {\n  private baseURL: string;\n  private headers: Headers;\n\n  constructor(\n    apiKey: string,\n    baseURL: string = \"https://api.metaphor.systems\"\n  ) {\n    this.baseURL = baseURL;\n    this.headers = new Headers({\n      \"x-api-key\": apiKey,\n      \"Content-Type\": \"application/json\",\n      \"User-Agent\": \"metaphor-node 1.0.21\",\n    });\n  }\n\n  private async request(\n    endpoint: string,\n    method: string,\n    body?: any\n  ): Promise<any> {\n    const response = await fetch(this.baseURL + endpoint, {\n      method,\n      headers: this.headers,\n      body: body ? JSON.stringify(body) : undefined,\n    });\n\n    if (!response.ok) {\n      const message = (await response.json()).error;\n      throw new Error(\n        `Request failed with status ${response.status}. ${message}`\n      );\n    }\n\n    return await response.json();\n  }\n\n  async search(\n    query: string,\n    options?: SearchOptions\n  ): Promise<SearchResponse> {\n    return await this.request(\"/search\", \"POST\", { query, ...options });\n  }\n\n  async findSimilar(\n    url: string,\n    options?: FindSimilarOptions\n  ): Promise<SearchResponse> {\n    return await this.request(\"/findSimilar\", \"POST\", { url, ...options });\n  }\n\n  async getContents(ids: string[] | Result[]): Promise<GetContentsResponse> {\n    if (ids.length === 0) {\n      throw new Error(\"Must provide at least one ID\");\n    }\n    let requestIds: string[];\n    if (typeof ids[0] === \"string\") {\n      requestIds = ids as string[];\n    } else {\n      requestIds = (ids as Result[]).map((result) => result.id);\n    }\n\n    // Using URLSearchParams to append the parameters to the URL\n    const params = new URLSearchParams({ ids: requestIds.join(\",\") });\n    return await this.request(`/contents?${params}`, \"GET\");\n  }\n}\n\n// NAMED EXPORTS\nexport type {\n  SearchOptions,\n  Result,\n  SearchResponse,\n  FindSimilarOptions,\n  DocumentContent,\n  GetContentsResponse,\n};\n\nexport default Metaphor;\n// Necessary to allow for ergonomic 'const metaphor = require('metaphor-node') in CommonJS\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports = Metaphor;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA+B;AAyD/B,IAAM,WAAN,MAAe;AAAA,EACL;AAAA,EACA;AAAA,EAER,YACE,QACA,UAAkB,gCAClB;AACA,SAAK,UAAU;AACf,SAAK,UAAU,IAAI,2BAAQ;AAAA,MACzB,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,QACZ,UACA,QACA,MACc;AACd,UAAM,WAAW,UAAM,mBAAAA,SAAM,KAAK,UAAU,UAAU;AAAA,MACpD;AAAA,MACA,SAAS,KAAK;AAAA,MACd,MAAM,OAAO,KAAK,UAAU,IAAI,IAAI;AAAA,IACtC,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,WAAW,MAAM,SAAS,KAAK,GAAG;AACxC,YAAM,IAAI;AAAA,QACR,8BAA8B,SAAS,MAAM,KAAK,OAAO;AAAA,MAC3D;AAAA,IACF;AAEA,WAAO,MAAM,SAAS,KAAK;AAAA,EAC7B;AAAA,EAEA,MAAM,OACJ,OACA,SACyB;AACzB,WAAO,MAAM,KAAK,QAAQ,WAAW,QAAQ,EAAE,OAAO,GAAG,QAAQ,CAAC;AAAA,EACpE;AAAA,EAEA,MAAM,YACJ,KACA,SACyB;AACzB,WAAO,MAAM,KAAK,QAAQ,gBAAgB,QAAQ,EAAE,KAAK,GAAG,QAAQ,CAAC;AAAA,EACvE;AAAA,EAEA,MAAM,YAAY,KAAwD;AACxE,QAAI,IAAI,WAAW,GAAG;AACpB,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAChD;AACA,QAAI;AACJ,QAAI,OAAO,IAAI,CAAC,MAAM,UAAU;AAC9B,mBAAa;AAAA,IACf,OAAO;AACL,mBAAc,IAAiB,IAAI,CAAC,WAAW,OAAO,EAAE;AAAA,IAC1D;AAGA,UAAM,SAAS,IAAI,gBAAgB,EAAE,KAAK,WAAW,KAAK,GAAG,EAAE,CAAC;AAChE,WAAO,MAAM,KAAK,QAAQ,aAAa,MAAM,IAAI,KAAK;AAAA,EACxD;AACF;AAYA,IAAO,cAAQ;AAEf,IAAI,OAAO,WAAW,eAAe,OAAO,SAAS;AACnD,SAAO,UAAU;AACnB;","names":["fetch"]}